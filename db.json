{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/pure/source/css/APlayer.min.css","path":"css/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/navy.styl","path":"css/navy.styl","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/scroll.png","path":"images/scroll.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/APlayer.min.js","path":"js/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/lang_select.js","path":"js/lang_select.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/mobile_nav.js","path":"js/mobile_nav.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.jpg","path":"images/donate/alipayimg.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.jpg","path":"images/donate/wechatpayimg.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/link/SzsFox-logo.png","path":"images/link/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/link/chuangzaoshi-logo.png","path":"images/link/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/link/idesign-logo.png","path":"images/link/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1581930809758},{"_id":"themes/pure/README.cn.md","hash":"de7ef42ea2e10b517c9d9949fc897105a727d33c","modified":1581930809759},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1581930809761},{"_id":"themes/pure/_config.yml","hash":"85d23f68a7059a1695eebc99c223cddc7aeef2fc","modified":1581930809763},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1581930809765},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1581930809951},{"_id":"source/about/index.md","hash":"4e18706f285d78f3acb5ea0dd4dc521a3d544151","modified":1581930809748},{"_id":"source/categories/index.md","hash":"6fa7f52e6bca79a676c7016f81d843c54f9d950c","modified":1581930809752},{"_id":"source/tags/index.md","hash":"86cb47074c43724586a628787515fe9b4bad86a1","modified":1581930809754},{"_id":"themes/pure/languages/de.yml","hash":"4876530cdb672a4779bd8c02e0976b7d66649406","modified":1581930809792},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1581930809794},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1581930809796},{"_id":"themes/pure/languages/ko.yml","hash":"3104bf659fbe7e812811e8d38baf10ff5c980ed7","modified":1581930809797},{"_id":"themes/pure/languages/pt-br.yml","hash":"636d800e8bcf0ac01bb4089c1a677e530cd7b10c","modified":1581930809799},{"_id":"themes/pure/languages/ru.yml","hash":"aab3da1424143befae173649b5f7f6d6b5e9f050","modified":1581930809801},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1581930809803},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1581930809804},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1581930809926},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1581930809927},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1581930809929},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1581930809931},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1581930809933},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1581930809935},{"_id":"themes/pure/layout/layout.ejs","hash":"554cfeddd0c18b1094bdf21c700a30e4f98bbef0","modified":1581930809937},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1581930809938},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1581930809940},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1581930809942},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1581930809945},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1581930809947},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1581930809949},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1581930809956},{"_id":"themes/pure/_source/404/index.md","hash":"a6444a93a6c27fe1b9ae8aeee9e321c078fe159a","modified":1581930809768},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1581930809771},{"_id":"themes/pure/_source/_data/links.yml","hash":"1a8212df3a4bfac68d7c7058330fbd6fc814e53a","modified":1581930809773},{"_id":"themes/pure/_source/about/index.md","hash":"4e18706f285d78f3acb5ea0dd4dc521a3d544151","modified":1581930809775},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1581930809778},{"_id":"themes/pure/_source/categories/index.md","hash":"28142e30c2f9d0fd5cce20f3375c9074c5cf6287","modified":1581930809780},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1581930809783},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1581930809785},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1581930809788},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"91303d59a2414bb6beacd7160203426c85519e83","modified":1581930809809},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1581930809810},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1581930809812},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1581930809814},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1581930809815},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1581930809818},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1581930809820},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1581930809822},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1581930809824},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"a38dc2a8f866828307885b7c8e9a0a388b7ff02e","modified":1581930809826},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1581930809828},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1581930809829},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"fffcee8f1fdaae383a9eaa314c0f1b76fe98ecc5","modified":1581930809831},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"3c49178a8227100b8cc6f8e0ecc7f0152ac20259","modified":1581930809832},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"a789484ffd16b5523452941ce27e3bf7f8ccebe2","modified":1581930809834},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1581930809836},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"c71475b8663e1acbc81ee20b6c5e33aeea5ff284","modified":1581930809838},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"ef02cfc867370e06bf53438de19d85591f408adb","modified":1581930809860},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"a44306b2d3d1b2245977285345a7d18a915a8d74","modified":1581930809862},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1581930809864},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1581930809893},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1581930809895},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1581930809897},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1581930809899},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1581930809900},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"f26547d7cf3086f926144fd2b22514894131332b","modified":1581930809902},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1581930809904},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1581930809905},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1581930809907},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1581930809909},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1581930809911},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1581930809912},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1581930809914},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1581930809917},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1581930809918},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1581930809920},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1581930809922},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1581930809923},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1581930809924},{"_id":"themes/pure/source/css/APlayer.min.css","hash":"9c536aa58929fcdd0d029b2921ac1e0ca65c57a2","modified":1581930809961},{"_id":"themes/pure/source/css/_variables.styl","hash":"0c90e53c9ce8347f452c4ec6cb4ee9f71617ba3d","modified":1581930809986},{"_id":"themes/pure/source/css/navy.styl","hash":"617912841fc8e2be88e2926845e96f4ad447876f","modified":1581930809987},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1581930810001},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1581930810003},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1581930810008},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1581930810010},{"_id":"themes/pure/source/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1581930810026},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1581930810028},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1581930810032},{"_id":"themes/pure/source/js/APlayer.min.js","hash":"936cca4f79000940252b8f4f356e3ae560374bcd","modified":1581930810035},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1581930810037},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1581930810038},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1581930810040},{"_id":"themes/pure/source/js/lang_select.js","hash":"f3d61d478e8f7e6d9d661e5e83fdc4450a012e67","modified":1581930810044},{"_id":"themes/pure/source/js/mobile_nav.js","hash":"f4976aef22eb1e5e06b20c7735f7d3ef29b8956e","modified":1581930810046},{"_id":"themes/pure/source/js/toc.js","hash":"d95c8db8caddf36cada66acf03a2377d28e9c107","modified":1581930810054},{"_id":"themes/pure/source/js/totop.js","hash":"6edfa7d7bddc6183bc56705964ee6ad40617c3e3","modified":1581930810056},{"_id":"themes/pure/source/favicon.png","hash":"a7aded03761a3085e67f58b925ba855b9d56007a","modified":1581930809998},{"_id":"themes/pure/source/images/avatar.jpg","hash":"ef47c05ea65f9fea46da5b33cb227700be159d26","modified":1581930810012},{"_id":"themes/pure/source/images/wechat.jpg","hash":"a3c186e1ac6d6c6f2ecfeb085af581bd3072d9d1","modified":1581930810030},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1581930810043},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1581930810048},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1581930810053},{"_id":"source/_posts/Go/goroutine/goroutine.md","hash":"6303916adc93294b2524768d077ef4ac77e58228","modified":1581996284085},{"_id":"source/_posts/设计模式/代理模式/proxy.md","hash":"42aa6f1c8db078fb08beb5df1f0c3cb7f116e43c","modified":1581930809736},{"_id":"source/_posts/设计模式/单例模式/singleton.md","hash":"4ad06e4de3814feba590fcf697dfdb182da3517b","modified":1581930809739},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1581930809840},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1581930809842},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"e6de7bb76f333ebb425f5daa22bed2c749ddac99","modified":1581930809843},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"d2b402ed2ed266034dadbf64ee1235555b241861","modified":1581930809845},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1581930809847},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1581930809848},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"9e74b1128b7c504dec586b6c9ea729cc0be4e46d","modified":1581930809851},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"32fc1758b75d89849e46d28bb482c4f8e3781ba8","modified":1581930809852},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1581930809854},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1581930809856},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1581930809857},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1581930809859},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"cb1bc57c6c6ce250bba52a0463005528347e366b","modified":1581930809869},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1581930809870},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1581930809872},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1581930809875},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1581930809879},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1581930809883},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1581930809884},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1581930809886},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1581930809887},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1581930809890},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1581930809892},{"_id":"themes/pure/source/css/_partial/archive.styl","hash":"f7ff7e9eb92f6786ccbf79bb4193a81ab8b49f8b","modified":1581930809964},{"_id":"themes/pure/source/css/_partial/base.styl","hash":"5b617c50bf4737b8e14ffdf9265b8e648d81198f","modified":1581930809966},{"_id":"themes/pure/source/css/_partial/carbonads.styl","hash":"6c75f5ea02eed9917b3eb17bfc05da3a747ec4fa","modified":1581930809968},{"_id":"themes/pure/source/css/_partial/footer.styl","hash":"437083c9be6d8f7a4854725fbaee78e3467b50c7","modified":1581930809969},{"_id":"themes/pure/source/css/_partial/header.styl","hash":"d54e6fbcbbecc580151d54ebf429cf2b91591c20","modified":1581930809971},{"_id":"themes/pure/source/css/_partial/highlight.styl","hash":"52ea72b2c65fd1cf105247ff2f41502e7e3f19ce","modified":1581930809973},{"_id":"themes/pure/source/css/_partial/index.styl","hash":"5fc130658d9200a87ec7ab33d10dfc9f29f04617","modified":1581930809976},{"_id":"themes/pure/source/css/_partial/mobile_nav.styl","hash":"855ea0469cf53cce2baf4ce9bdcc83dc79caceba","modified":1581930809978},{"_id":"themes/pure/source/css/_partial/page.styl","hash":"3ae39a6e7840f8ae2ad7af5c73ec47cfef5693ed","modified":1581930809979},{"_id":"themes/pure/source/css/_partial/plugins.styl","hash":"f4e4141eb109e177b989d680aa81c5723d9e7b1a","modified":1581930809981},{"_id":"themes/pure/source/css/_partial/post.styl","hash":"037864b22a7775df5086f8977c51d86dd7053625","modified":1581930809982},{"_id":"themes/pure/source/css/_partial/sidebar.styl","hash":"39451aef60afca98aa757eb76690a9e3e32cffbb","modified":1581930809984},{"_id":"themes/pure/source/css/style.css","hash":"ce7a0170934c11388b1dc5ab6b42bd2b55935e30","modified":1581930809990},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1581930809994},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1581930810006},{"_id":"themes/pure/source/images/donate/alipayimg.jpg","hash":"e0ea78bf2741f3258951cc70c28bba106bb0ce21","modified":1581930810015},{"_id":"themes/pure/source/images/donate/wechatpayimg.jpg","hash":"55c52080fe70f278f2e50f91b7fdf0e69403817b","modified":1581930810017},{"_id":"themes/pure/source/images/link/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1581930810020},{"_id":"themes/pure/source/images/link/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1581930810021},{"_id":"themes/pure/source/images/link/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1581930810023},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1581930810051},{"_id":"themes/pure/source/images/logo.png","hash":"a7aded03761a3085e67f58b925ba855b9d56007a","modified":1581930810024},{"_id":"source/_posts/设计模式/单例模式/singleton/test.png","hash":"ef3d7846d164b50ad2fb2dae5bcdfaf76c7e2df8","modified":1581930809743},{"_id":"public/baidusitemap.xml","hash":"a363e6cf9a26bf0ae3ef45ad1cd99ee31a239e47","modified":1581996314413},{"_id":"public/atom.xml","hash":"8186172ff5c3c38a68a7c2de6962c2c844df41c8","modified":1581996314413},{"_id":"public/content.json","hash":"74986be45a75214c5aafe25c21fc6da448df9a95","modified":1581996314413},{"_id":"public/sitemap.xml","hash":"46c66b2b7369a034987dfafd40ff260d0902d8c8","modified":1581996314413},{"_id":"public/archives/index.html","hash":"2350219a36a6a7edada8f18b2d83d0ff2ae4e7ab","modified":1581996314413},{"_id":"public/archives/2020/index.html","hash":"3517a3ef8fca9b23293f4f9a022004472ea3643f","modified":1581996314413},{"_id":"public/archives/2020/02/index.html","hash":"6914cee50dd23032eb7e748a9cc627d183817a18","modified":1581996314413},{"_id":"public/categories/Go/index.html","hash":"870b60d48e918709d04e2bf674a5e6582aabe3c5","modified":1581996314413},{"_id":"public/categories/设计模式/index.html","hash":"b84f8215a090ac400bf642a947fd4fe2bd79be6d","modified":1581996314413},{"_id":"public/tags/Go/index.html","hash":"cc5cff0745a4531bfd30739fa3ec0be5e21b65a8","modified":1581996314413},{"_id":"public/tags/设计模式/index.html","hash":"c38bfe66a39753e32c5d0d24586e653b246efc0c","modified":1581996314413},{"_id":"public/about/index.html","hash":"f00aa4f8664b52f5f059a1196be9903175190f78","modified":1581996314413},{"_id":"public/categories/index.html","hash":"7e378c5f842b220a7c63bc4dacf34162f6ee5c87","modified":1581996314413},{"_id":"public/tags/index.html","hash":"f5b0b87d7e643088b028f68099e7dbcb8f720756","modified":1581996314413},{"_id":"public/2020/02/16/Go/goroutine/goroutine/index.html","hash":"8d729519178acde79e593c2efbb3736f4ba587b5","modified":1581996314413},{"_id":"public/2020/02/15/设计模式/代理模式/proxy/index.html","hash":"bbb76aa56a715351255d4460df3c5f0373714eca","modified":1581996314413},{"_id":"public/2020/02/13/设计模式/单例模式/singleton/index.html","hash":"7f4fa985a081d697519df01c23a36b2ab06c4157","modified":1581996314413},{"_id":"public/index.html","hash":"5ff5892a317e921d351b831247e762ec06bc253a","modified":1581996314413},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1581996314413},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1581996314413},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1581996314413},{"_id":"public/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1581996314413},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1581996314413},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1581996314413},{"_id":"public/images/donate/alipayimg.jpg","hash":"e0ea78bf2741f3258951cc70c28bba106bb0ce21","modified":1581996314413},{"_id":"public/images/donate/wechatpayimg.jpg","hash":"55c52080fe70f278f2e50f91b7fdf0e69403817b","modified":1581996314413},{"_id":"public/images/link/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1581996314413},{"_id":"public/images/link/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1581996314413},{"_id":"public/images/link/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1581996314413},{"_id":"public/images/avatar.jpg","hash":"ef47c05ea65f9fea46da5b33cb227700be159d26","modified":1581996314413},{"_id":"public/images/wechat.jpg","hash":"a3c186e1ac6d6c6f2ecfeb085af581bd3072d9d1","modified":1581996314413},{"_id":"public/css/APlayer.min.css","hash":"9c536aa58929fcdd0d029b2921ac1e0ca65c57a2","modified":1581996314413},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1581996314413},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1581996314413},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1581996314413},{"_id":"public/js/lang_select.js","hash":"f3d61d478e8f7e6d9d661e5e83fdc4450a012e67","modified":1581996314413},{"_id":"public/js/mobile_nav.js","hash":"f4976aef22eb1e5e06b20c7735f7d3ef29b8956e","modified":1581996314413},{"_id":"public/js/toc.js","hash":"d95c8db8caddf36cada66acf03a2377d28e9c107","modified":1581996314413},{"_id":"public/js/totop.js","hash":"6edfa7d7bddc6183bc56705964ee6ad40617c3e3","modified":1581996314413},{"_id":"public/fonts/README.html","hash":"7c1128fed284d2fb7fee743e8a739da99385b358","modified":1581996314413},{"_id":"public/css/navy.css","hash":"4c22e228b86f581c0bfc38f3674c454a455099c0","modified":1581996314413},{"_id":"public/js/APlayer.min.js","hash":"936cca4f79000940252b8f4f356e3ae560374bcd","modified":1581996314413},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1581996314413},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1581996314413},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1581996314413},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1581996314413},{"_id":"public/css/style.css","hash":"ce7a0170934c11388b1dc5ab6b42bd2b55935e30","modified":1581996314413},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1581996314413},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1581996314413},{"_id":"public/favicon.png","hash":"a7aded03761a3085e67f58b925ba855b9d56007a","modified":1581996314413},{"_id":"public/images/logo.png","hash":"a7aded03761a3085e67f58b925ba855b9d56007a","modified":1581996314413},{"_id":"public/2020/02/13/设计模式/单例模式/singleton/test.png","hash":"ef3d7846d164b50ad2fb2dae5bcdfaf76c7e2df8","modified":1581996314413}],"Category":[{"name":"Go","_id":"ck6rbrdk00005bwv05bd6ec0i"},{"name":"设计模式","_id":"ck6rbrdk50008bwv07vg0ddwt"}],"Data":[],"Page":[{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"个人详细介绍\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n个人详细介绍\n\n\n","date":"2020-02-17T09:13:29.748Z","updated":"2020-02-17T09:13:29.748Z","path":"about/index.html","_id":"ck6rbrdgj0000bwv0hsos43c0","content":"<p>个人详细介绍</p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人详细介绍</p>\n"},{"title":"分类","layout":"categories","comments":0,"sidebar":"none","date":"2018-05-30T15:48:37.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\nsidebar: none\ndate: 2018-05-30 23:48:37\n---\n","updated":"2020-02-17T09:13:29.752Z","path":"categories/index.html","_id":"ck6rbrdgo0001bwv05m4m89sh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"sidebar":"none","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\nsidebar: none\n---\n","date":"2020-02-17T09:13:29.754Z","updated":"2020-02-17T09:13:29.754Z","path":"tags/index.html","_id":"ck6rbrdhr0002bwv090987sb7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Golang 中的 goroutine 简单理解和使用","description":null,"toc":true,"date":"2020-02-16T02:22:56.000Z","_content":"\n\n\n## 什么是goroutine\n\n### 相关概念\n\n- 进程\n\n  进程是系统进行资源分配的和调度的基本单元，具有独立功能的程序在某个数据集合上的一次执行过程\n\n- 线程\n\n​       线程是进程的一个执行实体或者执行单元，是比进程更小的且能独立运行的基本单元，一个进程至少会有一个线程\n\n- 协程\n\n  协程又被称作为微协程，纤程。\n\n  协程相对独立有自己的上下文，由线程拉起，和线程相比协程避免了无意义的调度因此提高了性能，协程相对线程而言节约的是CPU的切换时间，但需要开发人员自己通过代码去调度kong\n\n- goroutine\n\n​    goroutine是Go语言的协程实现，从调度上讲goroutine的调度开销远远小于线程调度开销，不同的是Go在runtime和系统调用等方面对goroutine做了封装处理，goroutine不完全是受开发人员控制，一定程度上由Go runtime管理, 当某个goroutine受阻塞时，会让出CPU资源给其他的goroutine, Golang 的一大特色就是从语言层面原生支持协程，在函数或者方法前面加 go关键字就可创建一个协程。\n\n\n\n## CSP并发模型\n\n​          这里简单介绍下CSP，后面专门写一篇详细介绍CSP模型, CSP(communicating sequential processes)它不同与多线程通过共享内存来通信，像Java中共享内存通信时需要考虑线程安全问题,`原子性`、`有序性`、`可见性`。CSP模型讲究的是通过通信来共享内存，这也是Go语言特有的并发模型，CSP模型主要通过Go的goroutine和channel来实现。\n\n## GPM模型\n\n这里也是简单了解和介绍，后面将详细介绍\n\nG: Goroutine ，本质上一种轻量级的线程\n\nP: Processor, 代表了M所需要上下文环境，处理用户级代码逻辑的处理器，这里是一个抽象的概念并非真正的CPU，当P有任务时需要创建或者唤醒一个系统线程来执行它队列里面任务，所以需要P与M的绑定形成一个执行单元\n\nM: Machine, 关联系统的一个内核线程，每次创建一个M时候都会有一个底层线程创建，所有的G任务最后都是在G上面运行\n\n它们之间的关系如下：\n\n​    一个M(Machine)对应一个系统内核线程，也会连接一个上下文P(Processor)，一个上下文P会关联多个G(Goroutine )\n\n## goroutine实际应用\n\n​    Go的并发写起来非常容器不像其他语言，只需要一个go关键字就可以搞定，例如:`go work()`, 在启动一个goroutine，一定需要知道它时何时关闭的，并且要节约使用，考虑它的必要性避免滥用，使用goroutine会给程序带来风险特别是死锁，对于后面问题排除也会带来很大的麻烦\n\n### sync.WaitGroup\n\n​    当我们启动一个goroutine时候，我们必须考虑它何时结束，但运行时间较长的时候，不做任何操作，这时候如果main主进程运行结束，会导致进程直接退出，不会考虑启动的goroutine有没有结束，甚至可能goroutine还没有起来，main已经运行完了，有必要的时候需要等待启动的goroutine运行完再退出，有人可能马上想到用sleep的方式，sleep不能准确估计goroutine运行时间，甚至可能会导致进程一直卡住，这里我们需要一个管理者，这个管理者就是sync.WaitGroup\n\n案例代码如下:\n\n```go\npackage main\n\nimport (\n   \"fmt\"\n   \"sync\"\n   \"time\"\n)\n\nfunc work(data int) {\n   fmt.Println(data)\n   time.Sleep(time.Duration(1) * time.Second)\n}\n\n\nfunc main() {\n   gNum := 5\n   var wg = sync.WaitGroup{}\n   wg.Add(gNum)\n   for i := 1; i <= gNum; i++ {\n      go func(w sync.WaitGroup, data int) {\n         work(data)\n         wg.Done()\n      }(wg, i)\n   }\n   wg.Wait()\n}\n```\n\n运行结果如下:\n\n```shell\n5\n1\n2\n4\n3\n\nProcess finished with exit code 0\n```\n\n\n\n使用的时候一定要保证设置等待的goroutine，最后一定要Done关闭掉不然就会导致死锁\n\n\n\n### 使用channel传递信息\n\n channle一定得小心使用，一定不要滥用，channel使用不当很容器造成死锁，并且channel使用注意以下几点\n\n- 不能往关闭的channle发消息\n- 不能只发消息或者不能只接受消息，只在单一的goroutine里操作无缓冲信道，一定会死锁，例如下面代码中的订阅者，如果不加超时机制，如果发布者关闭或者退出了订阅者等待的消息永远等不到就会造成死锁\n- 两个通道依赖使用,一个通道的输出作为另外一个通道的输入，例如`c1<-<-c2`，这个很容易造成两个goroutine等待变成死锁\n\n简单的发布订阅通过channel实现如下:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\n\n// 简单的发布订阅，通过channel实现\n\ntype Publisher struct {\n\tPubMsg     chan string\n\tStopSignal chan bool\n}\n\n// 发布者\nfunc publish(p Publisher, w *sync.WaitGroup) {\n\tduration := time.Duration(1) * time.Second\n\ttick := time.NewTicker(duration)\n\tvar msgCnt = 0\n\tdefer func() {\n\t\tfmt.Println(\"publisher will exit.......\")\n\t\ttick.Stop()\n\t\tw.Done()\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-tick.C:\n\t\t\t// 每秒发布一条消息\n\t\t\tp.PubMsg <- fmt.Sprintf(\"消息-%d\", msgCnt)\n\t\t\tmsgCnt++\n\n\t\t\t// 这里模拟关闭发布者\n\t\t\tif msgCnt >= 5 {\n\t\t\t\treturn\n\t\t\t}\n\n\t\tcase <-p.StopSignal:\n\t\t\tfmt.Println(\"收到停止发送信号,将关闭publish...\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// 订阅者\nfunc subscriber(p Publisher, w *sync.WaitGroup) {\n\td := time.Duration(2) * time.Second\n\ttimeout := time.NewTimer(d)\n\tdefer func() {\n\t\tfmt.Println(\"subscriber will exit.......\")\n\t\ttimeout.Stop()\n\t\tw.Done()\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase msg := <-p.PubMsg:\n\t\t\tfmt.Printf(\"收到订阅消息:%s\\n\", msg)\n\t\t\ttimeout.Reset(d)\n\t\t// 设置收取消息超时防止死锁\n\t\tcase <-timeout.C:\n\t\t\tfmt.Println(\"收取消息超时!!!\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc main() {\n\t// 消息通道\n\tmsgChan := make(chan string)\n\t// 停止信号通道\n\tsingleChan := make(chan bool)\n\tpublisher := Publisher{msgChan, singleChan}\n\twg := &sync.WaitGroup{}\n\n\twg.Add(2)\n\tgo publish(publisher, wg)\n\tgo subscriber(publisher, wg)\n\twg.Wait()\n}\n```\n\n\n\n\n\n## 总结\n\ngoroutine本质是协程，也是Go实现并行的核心，用起来比较简单，但是用好它不太容易，使用时一定要设计好，考虑是否一定要用它。\n\n","source":"_posts/Go/goroutine/goroutine.md","raw":"---\ntitle: Golang 中的 goroutine 简单理解和使用\ndescription: \ntoc: true\ntags: Go\ncategories: Go\ndate: 2020-02-16 10:22:56\n\n---\n\n\n\n## 什么是goroutine\n\n### 相关概念\n\n- 进程\n\n  进程是系统进行资源分配的和调度的基本单元，具有独立功能的程序在某个数据集合上的一次执行过程\n\n- 线程\n\n​       线程是进程的一个执行实体或者执行单元，是比进程更小的且能独立运行的基本单元，一个进程至少会有一个线程\n\n- 协程\n\n  协程又被称作为微协程，纤程。\n\n  协程相对独立有自己的上下文，由线程拉起，和线程相比协程避免了无意义的调度因此提高了性能，协程相对线程而言节约的是CPU的切换时间，但需要开发人员自己通过代码去调度kong\n\n- goroutine\n\n​    goroutine是Go语言的协程实现，从调度上讲goroutine的调度开销远远小于线程调度开销，不同的是Go在runtime和系统调用等方面对goroutine做了封装处理，goroutine不完全是受开发人员控制，一定程度上由Go runtime管理, 当某个goroutine受阻塞时，会让出CPU资源给其他的goroutine, Golang 的一大特色就是从语言层面原生支持协程，在函数或者方法前面加 go关键字就可创建一个协程。\n\n\n\n## CSP并发模型\n\n​          这里简单介绍下CSP，后面专门写一篇详细介绍CSP模型, CSP(communicating sequential processes)它不同与多线程通过共享内存来通信，像Java中共享内存通信时需要考虑线程安全问题,`原子性`、`有序性`、`可见性`。CSP模型讲究的是通过通信来共享内存，这也是Go语言特有的并发模型，CSP模型主要通过Go的goroutine和channel来实现。\n\n## GPM模型\n\n这里也是简单了解和介绍，后面将详细介绍\n\nG: Goroutine ，本质上一种轻量级的线程\n\nP: Processor, 代表了M所需要上下文环境，处理用户级代码逻辑的处理器，这里是一个抽象的概念并非真正的CPU，当P有任务时需要创建或者唤醒一个系统线程来执行它队列里面任务，所以需要P与M的绑定形成一个执行单元\n\nM: Machine, 关联系统的一个内核线程，每次创建一个M时候都会有一个底层线程创建，所有的G任务最后都是在G上面运行\n\n它们之间的关系如下：\n\n​    一个M(Machine)对应一个系统内核线程，也会连接一个上下文P(Processor)，一个上下文P会关联多个G(Goroutine )\n\n## goroutine实际应用\n\n​    Go的并发写起来非常容器不像其他语言，只需要一个go关键字就可以搞定，例如:`go work()`, 在启动一个goroutine，一定需要知道它时何时关闭的，并且要节约使用，考虑它的必要性避免滥用，使用goroutine会给程序带来风险特别是死锁，对于后面问题排除也会带来很大的麻烦\n\n### sync.WaitGroup\n\n​    当我们启动一个goroutine时候，我们必须考虑它何时结束，但运行时间较长的时候，不做任何操作，这时候如果main主进程运行结束，会导致进程直接退出，不会考虑启动的goroutine有没有结束，甚至可能goroutine还没有起来，main已经运行完了，有必要的时候需要等待启动的goroutine运行完再退出，有人可能马上想到用sleep的方式，sleep不能准确估计goroutine运行时间，甚至可能会导致进程一直卡住，这里我们需要一个管理者，这个管理者就是sync.WaitGroup\n\n案例代码如下:\n\n```go\npackage main\n\nimport (\n   \"fmt\"\n   \"sync\"\n   \"time\"\n)\n\nfunc work(data int) {\n   fmt.Println(data)\n   time.Sleep(time.Duration(1) * time.Second)\n}\n\n\nfunc main() {\n   gNum := 5\n   var wg = sync.WaitGroup{}\n   wg.Add(gNum)\n   for i := 1; i <= gNum; i++ {\n      go func(w sync.WaitGroup, data int) {\n         work(data)\n         wg.Done()\n      }(wg, i)\n   }\n   wg.Wait()\n}\n```\n\n运行结果如下:\n\n```shell\n5\n1\n2\n4\n3\n\nProcess finished with exit code 0\n```\n\n\n\n使用的时候一定要保证设置等待的goroutine，最后一定要Done关闭掉不然就会导致死锁\n\n\n\n### 使用channel传递信息\n\n channle一定得小心使用，一定不要滥用，channel使用不当很容器造成死锁，并且channel使用注意以下几点\n\n- 不能往关闭的channle发消息\n- 不能只发消息或者不能只接受消息，只在单一的goroutine里操作无缓冲信道，一定会死锁，例如下面代码中的订阅者，如果不加超时机制，如果发布者关闭或者退出了订阅者等待的消息永远等不到就会造成死锁\n- 两个通道依赖使用,一个通道的输出作为另外一个通道的输入，例如`c1<-<-c2`，这个很容易造成两个goroutine等待变成死锁\n\n简单的发布订阅通过channel实现如下:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\n\n// 简单的发布订阅，通过channel实现\n\ntype Publisher struct {\n\tPubMsg     chan string\n\tStopSignal chan bool\n}\n\n// 发布者\nfunc publish(p Publisher, w *sync.WaitGroup) {\n\tduration := time.Duration(1) * time.Second\n\ttick := time.NewTicker(duration)\n\tvar msgCnt = 0\n\tdefer func() {\n\t\tfmt.Println(\"publisher will exit.......\")\n\t\ttick.Stop()\n\t\tw.Done()\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-tick.C:\n\t\t\t// 每秒发布一条消息\n\t\t\tp.PubMsg <- fmt.Sprintf(\"消息-%d\", msgCnt)\n\t\t\tmsgCnt++\n\n\t\t\t// 这里模拟关闭发布者\n\t\t\tif msgCnt >= 5 {\n\t\t\t\treturn\n\t\t\t}\n\n\t\tcase <-p.StopSignal:\n\t\t\tfmt.Println(\"收到停止发送信号,将关闭publish...\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// 订阅者\nfunc subscriber(p Publisher, w *sync.WaitGroup) {\n\td := time.Duration(2) * time.Second\n\ttimeout := time.NewTimer(d)\n\tdefer func() {\n\t\tfmt.Println(\"subscriber will exit.......\")\n\t\ttimeout.Stop()\n\t\tw.Done()\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase msg := <-p.PubMsg:\n\t\t\tfmt.Printf(\"收到订阅消息:%s\\n\", msg)\n\t\t\ttimeout.Reset(d)\n\t\t// 设置收取消息超时防止死锁\n\t\tcase <-timeout.C:\n\t\t\tfmt.Println(\"收取消息超时!!!\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc main() {\n\t// 消息通道\n\tmsgChan := make(chan string)\n\t// 停止信号通道\n\tsingleChan := make(chan bool)\n\tpublisher := Publisher{msgChan, singleChan}\n\twg := &sync.WaitGroup{}\n\n\twg.Add(2)\n\tgo publish(publisher, wg)\n\tgo subscriber(publisher, wg)\n\twg.Wait()\n}\n```\n\n\n\n\n\n## 总结\n\ngoroutine本质是协程，也是Go实现并行的核心，用起来比较简单，但是用好它不太容易，使用时一定要设计好，考虑是否一定要用它。\n\n","slug":"Go/goroutine/goroutine","published":1,"updated":"2020-02-18T03:24:44.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rbrdjs0003bwv0cpt37odh","content":"<h2><span id=\"什么是goroutine\">什么是goroutine</span></h2><h3><span id=\"相关概念\">相关概念</span></h3><ul>\n<li><p>进程</p>\n<p>进程是系统进行资源分配的和调度的基本单元，具有独立功能的程序在某个数据集合上的一次执行过程</p>\n</li>\n<li><p>线程</p>\n</li>\n</ul>\n<p>​       线程是进程的一个执行实体或者执行单元，是比进程更小的且能独立运行的基本单元，一个进程至少会有一个线程</p>\n<ul>\n<li><p>协程</p>\n<p>协程又被称作为微协程，纤程。</p>\n<p>协程相对独立有自己的上下文，由线程拉起，和线程相比协程避免了无意义的调度因此提高了性能，协程相对线程而言节约的是CPU的切换时间，但需要开发人员自己通过代码去调度kong</p>\n</li>\n<li><p>goroutine</p>\n</li>\n</ul>\n<p>​    goroutine是Go语言的协程实现，从调度上讲goroutine的调度开销远远小于线程调度开销，不同的是Go在runtime和系统调用等方面对goroutine做了封装处理，goroutine不完全是受开发人员控制，一定程度上由Go runtime管理, 当某个goroutine受阻塞时，会让出CPU资源给其他的goroutine, Golang 的一大特色就是从语言层面原生支持协程，在函数或者方法前面加 go关键字就可创建一个协程。</p>\n<h2><span id=\"csp并发模型\">CSP并发模型</span></h2><p>​          这里简单介绍下CSP，后面专门写一篇详细介绍CSP模型, CSP(communicating sequential processes)它不同与多线程通过共享内存来通信，像Java中共享内存通信时需要考虑线程安全问题,<code>原子性</code>、<code>有序性</code>、<code>可见性</code>。CSP模型讲究的是通过通信来共享内存，这也是Go语言特有的并发模型，CSP模型主要通过Go的goroutine和channel来实现。</p>\n<h2><span id=\"gpm模型\">GPM模型</span></h2><p>这里也是简单了解和介绍，后面将详细介绍</p>\n<p>G: Goroutine ，本质上一种轻量级的线程</p>\n<p>P: Processor, 代表了M所需要上下文环境，处理用户级代码逻辑的处理器，这里是一个抽象的概念并非真正的CPU，当P有任务时需要创建或者唤醒一个系统线程来执行它队列里面任务，所以需要P与M的绑定形成一个执行单元</p>\n<p>M: Machine, 关联系统的一个内核线程，每次创建一个M时候都会有一个底层线程创建，所有的G任务最后都是在G上面运行</p>\n<p>它们之间的关系如下：</p>\n<p>​    一个M(Machine)对应一个系统内核线程，也会连接一个上下文P(Processor)，一个上下文P会关联多个G(Goroutine )</p>\n<h2><span id=\"goroutine实际应用\">goroutine实际应用</span></h2><p>​    Go的并发写起来非常容器不像其他语言，只需要一个go关键字就可以搞定，例如:<code>go work()</code>, 在启动一个goroutine，一定需要知道它时何时关闭的，并且要节约使用，考虑它的必要性避免滥用，使用goroutine会给程序带来风险特别是死锁，对于后面问题排除也会带来很大的麻烦</p>\n<h3><span id=\"syncwaitgroup\">sync.WaitGroup</span></h3><p>​    当我们启动一个goroutine时候，我们必须考虑它何时结束，但运行时间较长的时候，不做任何操作，这时候如果main主进程运行结束，会导致进程直接退出，不会考虑启动的goroutine有没有结束，甚至可能goroutine还没有起来，main已经运行完了，有必要的时候需要等待启动的goroutine运行完再退出，有人可能马上想到用sleep的方式，sleep不能准确估计goroutine运行时间，甚至可能会导致进程一直卡住，这里我们需要一个管理者，这个管理者就是sync.WaitGroup</p>\n<p>案例代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">   <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">   <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">work</span><span class=\"params\">(data <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(data)</span><br><span class=\"line\">   time.Sleep(time.Duration(<span class=\"number\">1</span>) * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   gNum := <span class=\"number\">5</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">   wg.Add(gNum)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= gNum; i++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w sync.WaitGroup, data <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">         work(data)</span><br><span class=\"line\">         wg.Done()</span><br><span class=\"line\">      &#125;(wg, i)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用的时候一定要保证设置等待的goroutine，最后一定要Done关闭掉不然就会导致死锁</p>\n<h3><span id=\"使用channel传递信息\">使用channel传递信息</span></h3><p> channle一定得小心使用，一定不要滥用，channel使用不当很容器造成死锁，并且channel使用注意以下几点</p>\n<ul>\n<li>不能往关闭的channle发消息</li>\n<li>不能只发消息或者不能只接受消息，只在单一的goroutine里操作无缓冲信道，一定会死锁，例如下面代码中的订阅者，如果不加超时机制，如果发布者关闭或者退出了订阅者等待的消息永远等不到就会造成死锁</li>\n<li>两个通道依赖使用,一个通道的输出作为另外一个通道的输入，例如<code>c1&lt;-&lt;-c2</code>，这个很容易造成两个goroutine等待变成死锁</li>\n</ul>\n<p>简单的发布订阅通过channel实现如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单的发布订阅，通过channel实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Publisher <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPubMsg     <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">\tStopSignal <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">publish</span><span class=\"params\">(p Publisher, w *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\tduration := time.Duration(<span class=\"number\">1</span>) * time.Second</span><br><span class=\"line\">\ttick := time.NewTicker(duration)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> msgCnt = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"publisher will exit.......\"</span>)</span><br><span class=\"line\">\t\ttick.Stop()</span><br><span class=\"line\">\t\tw.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-tick.C:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每秒发布一条消息</span></span><br><span class=\"line\">\t\t\tp.PubMsg &lt;- fmt.Sprintf(<span class=\"string\">\"消息-%d\"</span>, msgCnt)</span><br><span class=\"line\">\t\t\tmsgCnt++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里模拟关闭发布者</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> msgCnt &gt;= <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-p.StopSignal:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"收到停止发送信号,将关闭publish...\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscriber</span><span class=\"params\">(p Publisher, w *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\td := time.Duration(<span class=\"number\">2</span>) * time.Second</span><br><span class=\"line\">\ttimeout := time.NewTimer(d)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"subscriber will exit.......\"</span>)</span><br><span class=\"line\">\t\ttimeout.Stop()</span><br><span class=\"line\">\t\tw.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> msg := &lt;-p.PubMsg:</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"收到订阅消息:%s\\n\"</span>, msg)</span><br><span class=\"line\">\t\t\ttimeout.Reset(d)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置收取消息超时防止死锁</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-timeout.C:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"收取消息超时!!!\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 消息通道</span></span><br><span class=\"line\">\tmsgChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 停止信号通道</span></span><br><span class=\"line\">\tsingleChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\tpublisher := Publisher&#123;msgChan, singleChan&#125;</span><br><span class=\"line\">\twg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> publish(publisher, wg)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> subscriber(publisher, wg)</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2><span id=\"总结\">总结</span></h2><p>goroutine本质是协程，也是Go实现并行的核心，用起来比较简单，但是用好它不太容易，使用时一定要设计好，考虑是否一定要用它。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是goroutine\"><a href=\"#什么是goroutine\" class=\"headerlink\" title=\"什么是goroutine\"></a>什么是goroutine</h2><h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><ul>\n<li><p>进程</p>\n<p>进程是系统进行资源分配的和调度的基本单元，具有独立功能的程序在某个数据集合上的一次执行过程</p>\n</li>\n<li><p>线程</p>\n</li>\n</ul>\n<p>​       线程是进程的一个执行实体或者执行单元，是比进程更小的且能独立运行的基本单元，一个进程至少会有一个线程</p>\n<ul>\n<li><p>协程</p>\n<p>协程又被称作为微协程，纤程。</p>\n<p>协程相对独立有自己的上下文，由线程拉起，和线程相比协程避免了无意义的调度因此提高了性能，协程相对线程而言节约的是CPU的切换时间，但需要开发人员自己通过代码去调度kong</p>\n</li>\n<li><p>goroutine</p>\n</li>\n</ul>\n<p>​    goroutine是Go语言的协程实现，从调度上讲goroutine的调度开销远远小于线程调度开销，不同的是Go在runtime和系统调用等方面对goroutine做了封装处理，goroutine不完全是受开发人员控制，一定程度上由Go runtime管理, 当某个goroutine受阻塞时，会让出CPU资源给其他的goroutine, Golang 的一大特色就是从语言层面原生支持协程，在函数或者方法前面加 go关键字就可创建一个协程。</p>\n<h2 id=\"CSP并发模型\"><a href=\"#CSP并发模型\" class=\"headerlink\" title=\"CSP并发模型\"></a>CSP并发模型</h2><p>​          这里简单介绍下CSP，后面专门写一篇详细介绍CSP模型, CSP(communicating sequential processes)它不同与多线程通过共享内存来通信，像Java中共享内存通信时需要考虑线程安全问题,<code>原子性</code>、<code>有序性</code>、<code>可见性</code>。CSP模型讲究的是通过通信来共享内存，这也是Go语言特有的并发模型，CSP模型主要通过Go的goroutine和channel来实现。</p>\n<h2 id=\"GPM模型\"><a href=\"#GPM模型\" class=\"headerlink\" title=\"GPM模型\"></a>GPM模型</h2><p>这里也是简单了解和介绍，后面将详细介绍</p>\n<p>G: Goroutine ，本质上一种轻量级的线程</p>\n<p>P: Processor, 代表了M所需要上下文环境，处理用户级代码逻辑的处理器，这里是一个抽象的概念并非真正的CPU，当P有任务时需要创建或者唤醒一个系统线程来执行它队列里面任务，所以需要P与M的绑定形成一个执行单元</p>\n<p>M: Machine, 关联系统的一个内核线程，每次创建一个M时候都会有一个底层线程创建，所有的G任务最后都是在G上面运行</p>\n<p>它们之间的关系如下：</p>\n<p>​    一个M(Machine)对应一个系统内核线程，也会连接一个上下文P(Processor)，一个上下文P会关联多个G(Goroutine )</p>\n<h2 id=\"goroutine实际应用\"><a href=\"#goroutine实际应用\" class=\"headerlink\" title=\"goroutine实际应用\"></a>goroutine实际应用</h2><p>​    Go的并发写起来非常容器不像其他语言，只需要一个go关键字就可以搞定，例如:<code>go work()</code>, 在启动一个goroutine，一定需要知道它时何时关闭的，并且要节约使用，考虑它的必要性避免滥用，使用goroutine会给程序带来风险特别是死锁，对于后面问题排除也会带来很大的麻烦</p>\n<h3 id=\"sync-WaitGroup\"><a href=\"#sync-WaitGroup\" class=\"headerlink\" title=\"sync.WaitGroup\"></a>sync.WaitGroup</h3><p>​    当我们启动一个goroutine时候，我们必须考虑它何时结束，但运行时间较长的时候，不做任何操作，这时候如果main主进程运行结束，会导致进程直接退出，不会考虑启动的goroutine有没有结束，甚至可能goroutine还没有起来，main已经运行完了，有必要的时候需要等待启动的goroutine运行完再退出，有人可能马上想到用sleep的方式，sleep不能准确估计goroutine运行时间，甚至可能会导致进程一直卡住，这里我们需要一个管理者，这个管理者就是sync.WaitGroup</p>\n<p>案例代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">   <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">   <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">work</span><span class=\"params\">(data <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(data)</span><br><span class=\"line\">   time.Sleep(time.Duration(<span class=\"number\">1</span>) * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   gNum := <span class=\"number\">5</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">   wg.Add(gNum)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= gNum; i++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w sync.WaitGroup, data <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">         work(data)</span><br><span class=\"line\">         wg.Done()</span><br><span class=\"line\">      &#125;(wg, i)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用的时候一定要保证设置等待的goroutine，最后一定要Done关闭掉不然就会导致死锁</p>\n<h3 id=\"使用channel传递信息\"><a href=\"#使用channel传递信息\" class=\"headerlink\" title=\"使用channel传递信息\"></a>使用channel传递信息</h3><p> channle一定得小心使用，一定不要滥用，channel使用不当很容器造成死锁，并且channel使用注意以下几点</p>\n<ul>\n<li>不能往关闭的channle发消息</li>\n<li>不能只发消息或者不能只接受消息，只在单一的goroutine里操作无缓冲信道，一定会死锁，例如下面代码中的订阅者，如果不加超时机制，如果发布者关闭或者退出了订阅者等待的消息永远等不到就会造成死锁</li>\n<li>两个通道依赖使用,一个通道的输出作为另外一个通道的输入，例如<code>c1&lt;-&lt;-c2</code>，这个很容易造成两个goroutine等待变成死锁</li>\n</ul>\n<p>简单的发布订阅通过channel实现如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单的发布订阅，通过channel实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Publisher <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPubMsg     <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">\tStopSignal <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">publish</span><span class=\"params\">(p Publisher, w *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\tduration := time.Duration(<span class=\"number\">1</span>) * time.Second</span><br><span class=\"line\">\ttick := time.NewTicker(duration)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> msgCnt = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"publisher will exit.......\"</span>)</span><br><span class=\"line\">\t\ttick.Stop()</span><br><span class=\"line\">\t\tw.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-tick.C:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每秒发布一条消息</span></span><br><span class=\"line\">\t\t\tp.PubMsg &lt;- fmt.Sprintf(<span class=\"string\">\"消息-%d\"</span>, msgCnt)</span><br><span class=\"line\">\t\t\tmsgCnt++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里模拟关闭发布者</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> msgCnt &gt;= <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-p.StopSignal:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"收到停止发送信号,将关闭publish...\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscriber</span><span class=\"params\">(p Publisher, w *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\td := time.Duration(<span class=\"number\">2</span>) * time.Second</span><br><span class=\"line\">\ttimeout := time.NewTimer(d)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"subscriber will exit.......\"</span>)</span><br><span class=\"line\">\t\ttimeout.Stop()</span><br><span class=\"line\">\t\tw.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> msg := &lt;-p.PubMsg:</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"收到订阅消息:%s\\n\"</span>, msg)</span><br><span class=\"line\">\t\t\ttimeout.Reset(d)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置收取消息超时防止死锁</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-timeout.C:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"收取消息超时!!!\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 消息通道</span></span><br><span class=\"line\">\tmsgChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 停止信号通道</span></span><br><span class=\"line\">\tsingleChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\tpublisher := Publisher&#123;msgChan, singleChan&#125;</span><br><span class=\"line\">\twg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> publish(publisher, wg)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> subscriber(publisher, wg)</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>goroutine本质是协程，也是Go实现并行的核心，用起来比较简单，但是用好它不太容易，使用时一定要设计好，考虑是否一定要用它。</p>\n"},{"title":"单例模式","description":"单例模式通过Go来实现","date":"2020-02-13T04:08:40.000Z","_content":"\n![test](./test.png)\n\n单例模式是我们平常开发中用的最多设计模式之一，单例有很多级别上的，例如函数上的单例，进程上的单例，下面讲的是代码中的单例，只要了解单例的思想即可，语言知识实现工具，下面讲解如下几种类型单例模式\n\n- 饿汉模式\n- 懒汉模式\n- 懒汉模式(加锁)\n- 懒汉模式(双重检查加锁)\n- sync.Once实现\n\n\n\n相关代码如下:\n\n```go\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\ntype SingleTon struct {\n}\n\nvar singleTon *SingleTon\n\nvar mu sync.Mutex\n\n//懒汉模式\n//还有一种饿汉式，就是一开始就初始化singleTon,实现如下\n//func init() {\n// singleTon = &SingleTon{}\n//}\nfunc NewSingleTon() *SingleTon {\n   if singleTon == nil {\n      singleTon = &SingleTon{}\n   }\n   return singleTon\n}\n\n// 懒汉加锁\nfunc NewSingleTonByLock() *SingleTon {\n   mu.Lock()\n   defer mu.Unlock()\n\n   if singleTon == nil {\n      singleTon = &SingleTon{}\n   }\n   return singleTon\n}\n\n// 懒汉加检查锁\nfunc NewSingleTonByLock2() *SingleTon {\n   if singleTon == nil {\n      mu.Lock()\n      defer mu.Unlock()\n\n      if singleTon == nil {\n         singleTon = &SingleTon{}\n      }\n   }\n   return singleTon\n}\n\n// 通过sync.Once实现\n// 看过Once包的知道，实现很简单通过加锁实现，通过done标记位来判断，运行过一次通过原子操作将done置为1\nvar once sync.Once\n\nfunc NewSingleTonByOnce() *SingleTon {\n   once.Do(func() {\n      singleTon = &SingleTon{}\n   })\n\n   return singleTon\n}\n```","source":"_posts/设计模式/单例模式/singleton.md","raw":"---\ntitle: 单例模式\ndescription: 单例模式通过Go来实现\ntags: 设计模式\ncategories: 设计模式\ndate: 2020-02-13 12:08:40\n---\n\n![test](./test.png)\n\n单例模式是我们平常开发中用的最多设计模式之一，单例有很多级别上的，例如函数上的单例，进程上的单例，下面讲的是代码中的单例，只要了解单例的思想即可，语言知识实现工具，下面讲解如下几种类型单例模式\n\n- 饿汉模式\n- 懒汉模式\n- 懒汉模式(加锁)\n- 懒汉模式(双重检查加锁)\n- sync.Once实现\n\n\n\n相关代码如下:\n\n```go\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\ntype SingleTon struct {\n}\n\nvar singleTon *SingleTon\n\nvar mu sync.Mutex\n\n//懒汉模式\n//还有一种饿汉式，就是一开始就初始化singleTon,实现如下\n//func init() {\n// singleTon = &SingleTon{}\n//}\nfunc NewSingleTon() *SingleTon {\n   if singleTon == nil {\n      singleTon = &SingleTon{}\n   }\n   return singleTon\n}\n\n// 懒汉加锁\nfunc NewSingleTonByLock() *SingleTon {\n   mu.Lock()\n   defer mu.Unlock()\n\n   if singleTon == nil {\n      singleTon = &SingleTon{}\n   }\n   return singleTon\n}\n\n// 懒汉加检查锁\nfunc NewSingleTonByLock2() *SingleTon {\n   if singleTon == nil {\n      mu.Lock()\n      defer mu.Unlock()\n\n      if singleTon == nil {\n         singleTon = &SingleTon{}\n      }\n   }\n   return singleTon\n}\n\n// 通过sync.Once实现\n// 看过Once包的知道，实现很简单通过加锁实现，通过done标记位来判断，运行过一次通过原子操作将done置为1\nvar once sync.Once\n\nfunc NewSingleTonByOnce() *SingleTon {\n   once.Do(func() {\n      singleTon = &SingleTon{}\n   })\n\n   return singleTon\n}\n```","slug":"设计模式/单例模式/singleton","published":1,"updated":"2020-02-17T09:13:29.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rbrdjx0004bwv09wtq42i2","content":"<p><img src=\"./test.png\" alt=\"test\"></p>\n<p>单例模式是我们平常开发中用的最多设计模式之一，单例有很多级别上的，例如函数上的单例，进程上的单例，下面讲的是代码中的单例，只要了解单例的思想即可，语言知识实现工具，下面讲解如下几种类型单例模式</p>\n<ul>\n<li>饿汉模式</li>\n<li>懒汉模式</li>\n<li>懒汉模式(加锁)</li>\n<li>懒汉模式(双重检查加锁)</li>\n<li>sync.Once实现</li>\n</ul>\n<p>相关代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SingleTon <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleTon *SingleTon</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mu sync.Mutex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//懒汉模式</span></span><br><span class=\"line\"><span class=\"comment\">//还有一种饿汉式，就是一开始就初始化singleTon,实现如下</span></span><br><span class=\"line\"><span class=\"comment\">//func init() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// singleTon = &amp;SingleTon&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTon</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒汉加锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTonByLock</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒汉加检查锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTonByLock2</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      mu.Lock()</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过sync.Once实现</span></span><br><span class=\"line\"><span class=\"comment\">// 看过Once包的知道，实现很简单通过加锁实现，通过done标记位来判断，运行过一次通过原子操作将done置为1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> once sync.Once</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTonByOnce</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   once.Do(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"./test.png\" alt=\"test\"></p>\n<p>单例模式是我们平常开发中用的最多设计模式之一，单例有很多级别上的，例如函数上的单例，进程上的单例，下面讲的是代码中的单例，只要了解单例的思想即可，语言知识实现工具，下面讲解如下几种类型单例模式</p>\n<ul>\n<li>饿汉模式</li>\n<li>懒汉模式</li>\n<li>懒汉模式(加锁)</li>\n<li>懒汉模式(双重检查加锁)</li>\n<li>sync.Once实现</li>\n</ul>\n<p>相关代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SingleTon <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleTon *SingleTon</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mu sync.Mutex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//懒汉模式</span></span><br><span class=\"line\"><span class=\"comment\">//还有一种饿汉式，就是一开始就初始化singleTon,实现如下</span></span><br><span class=\"line\"><span class=\"comment\">//func init() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// singleTon = &amp;SingleTon&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTon</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒汉加锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTonByLock</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒汉加检查锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTonByLock2</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      mu.Lock()</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> singleTon == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过sync.Once实现</span></span><br><span class=\"line\"><span class=\"comment\">// 看过Once包的知道，实现很简单通过加锁实现，通过done标记位来判断，运行过一次通过原子操作将done置为1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> once sync.Once</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleTonByOnce</span><span class=\"params\">()</span> *<span class=\"title\">SingleTon</span></span> &#123;</span><br><span class=\"line\">   once.Do(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> singleTon</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"代理模式","description":null,"date":"2020-02-15T02:08:40.000Z","_content":"\n\n\n\n\n​    代理模式为其他对象提供一种代理以控制对这个对象的访问权限，它主要解决直接访问对象带来的问题，例如公司环境访问通过堡垒机代理访问生产环境权限，避免了生成环境权限全部开发的局面，只需要开放相应的权限给开发者即可，注意它不需要更改原始接口的内容\n\n​     例如下面堡垒机，在原始虚拟机VM上做权限控制和审计功能\n\n```go\npackage main\n\nimport (\n   \"errors\"\n   \"fmt\"\n)\n\n// 原始虚拟机拥有读写和执行权限\ntype VM struct {\n}\n\nfunc (vm *VM) Write() {\n   fmt.Println(\"Permission to write....\")\n}\n\nfunc (vm *VM) Read() {\n   fmt.Println(\"Permission to Read.....\")\n}\n\nfunc (vm *VM) execute() {\n   fmt.Println(\"Permission to execute.....\")\n}\n\n// 堡垒机\ntype AccessGateway struct {\n   v *VM\n}\n\n// 堡垒机可以做相关权限控制,和审计功能\nfunc NewAccessGateWay(username string) (*AccessGateway, error) {\n   if username != \"Yu\" {\n      return nil, errors.New(\"Username not enough permissions\")\n   }\n   fmt.Printf(\"[%s] login into access gate wasy......\\n\", username)\n   return &AccessGateway{&VM{}}, nil\n}\n\nfunc (ag *AccessGateway) Read() {\n   ag.v.Read()\n}\n\nfunc (ag *AccessGateway) Write() {\n   ag.v.Write()\n}\n\nfunc main() {\n   var accessGateway, err = NewAccessGateWay(\"Yu\")\n   if err != nil {\n      fmt.Printf(\"Login into access gateway meet err! %v\", err)\n      return\n   }\n   accessGateway.Write()\n   accessGateway.Read()\n}\n```\n\n\n\n输出结果如下:\n\n```powershell\n[Yu] login into access gate wasy......\nPermission to write....\nPermission to Read.....\n\nProcess finished with exit code 0\n```","source":"_posts/设计模式/代理模式/proxy.md","raw":"---\ntitle: 代理模式\ndescription: \ntags: 设计模式\ncategories: 设计模式\ndate: 2020-02-15 10:08:40\t\t\n---\n\n\n\n\n\n​    代理模式为其他对象提供一种代理以控制对这个对象的访问权限，它主要解决直接访问对象带来的问题，例如公司环境访问通过堡垒机代理访问生产环境权限，避免了生成环境权限全部开发的局面，只需要开放相应的权限给开发者即可，注意它不需要更改原始接口的内容\n\n​     例如下面堡垒机，在原始虚拟机VM上做权限控制和审计功能\n\n```go\npackage main\n\nimport (\n   \"errors\"\n   \"fmt\"\n)\n\n// 原始虚拟机拥有读写和执行权限\ntype VM struct {\n}\n\nfunc (vm *VM) Write() {\n   fmt.Println(\"Permission to write....\")\n}\n\nfunc (vm *VM) Read() {\n   fmt.Println(\"Permission to Read.....\")\n}\n\nfunc (vm *VM) execute() {\n   fmt.Println(\"Permission to execute.....\")\n}\n\n// 堡垒机\ntype AccessGateway struct {\n   v *VM\n}\n\n// 堡垒机可以做相关权限控制,和审计功能\nfunc NewAccessGateWay(username string) (*AccessGateway, error) {\n   if username != \"Yu\" {\n      return nil, errors.New(\"Username not enough permissions\")\n   }\n   fmt.Printf(\"[%s] login into access gate wasy......\\n\", username)\n   return &AccessGateway{&VM{}}, nil\n}\n\nfunc (ag *AccessGateway) Read() {\n   ag.v.Read()\n}\n\nfunc (ag *AccessGateway) Write() {\n   ag.v.Write()\n}\n\nfunc main() {\n   var accessGateway, err = NewAccessGateWay(\"Yu\")\n   if err != nil {\n      fmt.Printf(\"Login into access gateway meet err! %v\", err)\n      return\n   }\n   accessGateway.Write()\n   accessGateway.Read()\n}\n```\n\n\n\n输出结果如下:\n\n```powershell\n[Yu] login into access gate wasy......\nPermission to write....\nPermission to Read.....\n\nProcess finished with exit code 0\n```","slug":"设计模式/代理模式/proxy","published":1,"updated":"2020-02-17T09:13:29.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rbrdk30007bwv07e8h68fp","content":"<p>​    代理模式为其他对象提供一种代理以控制对这个对象的访问权限，它主要解决直接访问对象带来的问题，例如公司环境访问通过堡垒机代理访问生产环境权限，避免了生成环境权限全部开发的局面，只需要开放相应的权限给开发者即可，注意它不需要更改原始接口的内容</p>\n<p>​     例如下面堡垒机，在原始虚拟机VM上做权限控制和审计功能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">   <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原始虚拟机拥有读写和执行权限</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> VM <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(vm *VM)</span> <span class=\"title\">Write</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">\"Permission to write....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(vm *VM)</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">\"Permission to Read.....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(vm *VM)</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">\"Permission to execute.....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堡垒机</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AccessGateway <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   v *VM</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堡垒机可以做相关权限控制,和审计功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewAccessGateWay</span><span class=\"params\">(username <span class=\"keyword\">string</span>)</span> <span class=\"params\">(*AccessGateway, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> username != <span class=\"string\">\"Yu\"</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">\"Username not enough permissions\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">\"[%s] login into access gate wasy......\\n\"</span>, username)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;AccessGateway&#123;&amp;VM&#123;&#125;&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ag *AccessGateway)</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   ag.v.Read()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ag *AccessGateway)</span> <span class=\"title\">Write</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   ag.v.Write()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> accessGateway, err = NewAccessGateWay(<span class=\"string\">\"Yu\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"Login into access gateway meet err! %v\"</span>, err)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   accessGateway.Write()</span><br><span class=\"line\">   accessGateway.Read()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">Yu</span>] login into access gate wasy......</span><br><span class=\"line\">Permission to write....</span><br><span class=\"line\">Permission to Read.....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Process</span> finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>​    代理模式为其他对象提供一种代理以控制对这个对象的访问权限，它主要解决直接访问对象带来的问题，例如公司环境访问通过堡垒机代理访问生产环境权限，避免了生成环境权限全部开发的局面，只需要开放相应的权限给开发者即可，注意它不需要更改原始接口的内容</p>\n<p>​     例如下面堡垒机，在原始虚拟机VM上做权限控制和审计功能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">   <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原始虚拟机拥有读写和执行权限</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> VM <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(vm *VM)</span> <span class=\"title\">Write</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">\"Permission to write....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(vm *VM)</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">\"Permission to Read.....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(vm *VM)</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">\"Permission to execute.....\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堡垒机</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AccessGateway <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   v *VM</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堡垒机可以做相关权限控制,和审计功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewAccessGateWay</span><span class=\"params\">(username <span class=\"keyword\">string</span>)</span> <span class=\"params\">(*AccessGateway, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> username != <span class=\"string\">\"Yu\"</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">\"Username not enough permissions\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">\"[%s] login into access gate wasy......\\n\"</span>, username)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;AccessGateway&#123;&amp;VM&#123;&#125;&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ag *AccessGateway)</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   ag.v.Read()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ag *AccessGateway)</span> <span class=\"title\">Write</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   ag.v.Write()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> accessGateway, err = NewAccessGateWay(<span class=\"string\">\"Yu\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"Login into access gateway meet err! %v\"</span>, err)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   accessGateway.Write()</span><br><span class=\"line\">   accessGateway.Read()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">Yu</span>] login into access gate wasy......</span><br><span class=\"line\">Permission to write....</span><br><span class=\"line\">Permission to Read.....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Process</span> finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/设计模式/单例模式/singleton/test.png","slug":"test.png","post":"ck6rbrdjx0004bwv09wtq42i2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck6rbrdjs0003bwv0cpt37odh","category_id":"ck6rbrdk00005bwv05bd6ec0i","_id":"ck6rbrdk7000bbwv0b8z99rl1"},{"post_id":"ck6rbrdjx0004bwv09wtq42i2","category_id":"ck6rbrdk50008bwv07vg0ddwt","_id":"ck6rbrdk9000fbwv06gv1afgc"},{"post_id":"ck6rbrdk30007bwv07e8h68fp","category_id":"ck6rbrdk50008bwv07vg0ddwt","_id":"ck6rbrdka000hbwv0hvz8ejd4"}],"PostTag":[{"post_id":"ck6rbrdjs0003bwv0cpt37odh","tag_id":"ck6rbrdk20006bwv09ru99qqv","_id":"ck6rbrdk6000abwv008ivgafs"},{"post_id":"ck6rbrdjx0004bwv09wtq42i2","tag_id":"ck6rbrdk60009bwv05dlf5oed","_id":"ck6rbrdk9000ebwv037f881m3"},{"post_id":"ck6rbrdk30007bwv07e8h68fp","tag_id":"ck6rbrdk60009bwv05dlf5oed","_id":"ck6rbrdka000gbwv0dn5d2f9f"}],"Tag":[{"name":"Go","_id":"ck6rbrdk20006bwv09ru99qqv"},{"name":"设计模式","_id":"ck6rbrdk60009bwv05dlf5oed"}]}}