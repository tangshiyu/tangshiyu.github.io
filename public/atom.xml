<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu</title>
  
  <subtitle>Jarrem</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tangshiyu.github.io/"/>
  <updated>2020-02-15T02:40:56.407Z</updated>
  <id>https://tangshiyu.github.io/</id>
  
  <author>
    <name>Yu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理模式</title>
    <link href="https://tangshiyu.github.io/2020/02/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/proxy/"/>
    <id>https://tangshiyu.github.io/2020/02/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/proxy/</id>
    <published>2020-02-15T02:08:40.000Z</published>
    <updated>2020-02-15T02:40:56.407Z</updated>
    
    <content type="html"><![CDATA[<p>​    代理模式为其他对象提供一种代理以控制对这个对象的访问权限，它主要解决直接访问对象带来的问题，例如公司环境访问通过堡垒机代理访问生产环境权限，避免了生成环境权限全部开发的局面，只需要开放相应的权限给开发者即可，注意它不需要更改原始接口的内容</p><p>​     例如下面堡垒机，在原始虚拟机VM上做权限控制和审计功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"errors"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始虚拟机拥有读写和执行权限</span></span><br><span class="line"><span class="keyword">type</span> VM <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *VM)</span> <span class="title">Write</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"Permission to write...."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *VM)</span> <span class="title">Read</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"Permission to Read....."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *VM)</span> <span class="title">execute</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"Permission to execute....."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堡垒机</span></span><br><span class="line"><span class="keyword">type</span> AccessGateway <span class="keyword">struct</span> &#123;</span><br><span class="line">   v *VM</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堡垒机可以做相关权限控制,和审计功能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAccessGateWay</span><span class="params">(username <span class="keyword">string</span>)</span> <span class="params">(*AccessGateway, error)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> username != <span class="string">"Yu"</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Username not enough permissions"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">"[%s] login into access gate wasy......\n"</span>, username)</span><br><span class="line">   <span class="keyword">return</span> &amp;AccessGateway&#123;&amp;VM&#123;&#125;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ag *AccessGateway)</span> <span class="title">Read</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ag.v.Read()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ag *AccessGateway)</span> <span class="title">Write</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ag.v.Write()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> accessGateway, err = NewAccessGateWay(<span class="string">"Yu"</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">"Login into access gateway meet err! %v"</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   accessGateway.Write()</span><br><span class="line">   accessGateway.Read()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Yu</span>] login into access gate wasy......</span><br><span class="line">Permission to write....</span><br><span class="line">Permission to Read.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">Process</span> finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    代理模式为其他对象提供一种代理以控制对这个对象的访问权限，它主要解决直接访问对象带来的问题，例如公司环境访问通过堡垒机代理访问生产环境权限，避免了生成环境权限全部开发的局面，只需要开放相应的权限给开发者即可，注意它不需要更改原始接口的内容&lt;/p&gt;
&lt;p&gt;​    
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://tangshiyu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://tangshiyu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://tangshiyu.github.io/2020/02/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/singleton/"/>
    <id>https://tangshiyu.github.io/2020/02/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/singleton/</id>
    <published>2020-02-13T04:08:40.000Z</published>
    <updated>2020-02-15T01:58:46.974Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./test.png" alt="test"></p><p>单例模式是我们平常开发中用的最多设计模式之一，单例有很多级别上的，例如函数上的单例，进程上的单例，下面讲的是代码中的单例，只要了解单例的思想即可，语言知识实现工具，下面讲解如下几种类型单例模式</p><ul><li>饿汉模式</li><li>懒汉模式</li><li>懒汉模式(加锁)</li><li>懒汉模式(双重检查加锁)</li><li>sync.Once实现</li></ul><p>相关代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SingleTon <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleTon *SingleTon</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="comment">//还有一种饿汉式，就是一开始就初始化singleTon,实现如下</span></span><br><span class="line"><span class="comment">//func init() &#123;</span></span><br><span class="line"><span class="comment">// singleTon = &amp;SingleTon&#123;&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSingleTon</span><span class="params">()</span> *<span class="title">SingleTon</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> singleTon == <span class="literal">nil</span> &#123;</span><br><span class="line">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> singleTon</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉加锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSingleTonByLock</span><span class="params">()</span> *<span class="title">SingleTon</span></span> &#123;</span><br><span class="line">   mu.Lock()</span><br><span class="line">   <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> singleTon == <span class="literal">nil</span> &#123;</span><br><span class="line">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> singleTon</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉加检查锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSingleTonByLock2</span><span class="params">()</span> *<span class="title">SingleTon</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> singleTon == <span class="literal">nil</span> &#123;</span><br><span class="line">      mu.Lock()</span><br><span class="line">      <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> singleTon == <span class="literal">nil</span> &#123;</span><br><span class="line">         singleTon = &amp;SingleTon&#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> singleTon</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过sync.Once实现</span></span><br><span class="line"><span class="comment">// 看过Once包的知道，实现很简单通过加锁实现，通过done标记位来判断，运行过一次通过原子操作将done置为1</span></span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSingleTonByOnce</span><span class="params">()</span> *<span class="title">SingleTon</span></span> &#123;</span><br><span class="line">   once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      singleTon = &amp;SingleTon&#123;&#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> singleTon</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      单例模式通过Go来实现
    
    </summary>
    
    
      <category term="设计模式" scheme="https://tangshiyu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://tangshiyu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
